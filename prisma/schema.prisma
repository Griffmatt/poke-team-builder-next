generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CreatedPokemon {
  id       String          @id @default(cuid())
  userId   String
  name     String
  ability  String
  nature   String
  heldItem String
  moves    PokemonMoves[]
  stats    PokemonStats[]
  teams    PokemonOnTeam[]
  User     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PokemonMoves {
  move           String
  pokemonId      String
  moveOrder      Int
  CreatedPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([move, pokemonId])
}

model PokemonStats {
  stat           String
  value          Int
  pokemonId      String
  CreatedPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([stat, pokemonId])
}

model PokemonOnTeam {
  pokemonId      String
  teamId         String
  CreatedPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  team           Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([pokemonId, teamId])
}

model Team {
  id        String          @id @default(cuid())
  userId    String
  teamStyle String
  teamName  String
  pokemon   PokemonOnTeam[]
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pokemon       CreatedPokemon[]
  teams         Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
