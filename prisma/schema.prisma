generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CreatedPokemon {
  id        String            @id @default(cuid())
  userId    String
  name      String
  ability   String
  nature    String
  heldItem  String
  teraType  String
  shiny     Boolean
  createdAt DateTime          @default(now())
  moves     PokemonMoves[]
  evs       PokemonEvs[]
  ivs       PokemonIvs[]
  teams     PokemonOnTeam[]
  favorited FavoritePokemon[]
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, id])
}

model PokemonMoves {
  move           String
  pokemonId      String
  moveOrder      Int
  createdPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([moveOrder, pokemonId])
}

model PokemonEvs {
  stat           String
  value          Int
  pokemonId      String
  createdPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([stat, pokemonId])
}

model PokemonIvs {
  stat           String
  value          Int
  pokemonId      String
  createdPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([stat, pokemonId])
}

model PokemonOnTeam {
  pokemonId      String
  teamId         String
  createdPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  team           Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([pokemonId, teamId])
}

model Team {
  id                String          @id @default(cuid())
  userId            String
  wins              Int             @default(0)
  battles           Int             @default(0)
  originalTrainerId String?
  teamStyle         String
  teamName          String
  createdAt         DateTime        @default(now())
  favorited         FavoriteTeams[]
  pokemon           PokemonOnTeam[]
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([userId, id])
}

model FavoritePokemon {
  pokemonId      String
  userId         String
  favoritedAt    DateTime       @default(now())
  createdPokemon CreatedPokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pokemonId, userId])
}

model FavoriteTeams {
  teamId      String
  userId      String
  favoritedAt DateTime @default(now())
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Following {
  followerId String
  followingId String
  followerUser           User           @relation(fields: [followerId], references: [id], onDelete: Cascade, name:"follower")
  followingUser           User           @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "following")

  @@unique([followerId, followingId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  winStreak       Int               @default(0)
  isAdmin Boolean @default(false)
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  userName        String?           @unique
  accounts        Account[]
  sessions        Session[]
  pokemon         CreatedPokemon[]
  teams           Team[]
  favoriteTeams   FavoriteTeams[]
  favoritePokemon FavoritePokemon[]
  following Following[] @relation(name: "following")
  followers Following[] @relation(name: "follower")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
